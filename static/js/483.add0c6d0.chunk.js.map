{"version":3,"file":"static/js/483.add0c6d0.chunk.js","mappings":"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","sources":["components/Button/index.jsx","components/Img/index.jsx","components/ErrorMessage/index.jsx","components/Input/index.jsx","components/SelectBox/index.jsx","components/Text/index.jsx","pages/ProjectVisualization/details.jsx","../node_modules/react-google-charts/src/hooks/useLoadGoogleCharts.ts","../node_modules/react-google-charts/src/hooks/useLoadScript.ts","../node_modules/react-google-charts/src/default-props.ts","../node_modules/react-google-charts/src/generate-unique-id.ts","../node_modules/react-google-charts/src/constants.ts","../node_modules/react-google-charts/src/Context.tsx","../node_modules/react-google-charts/src/components/GoogleChartDataTable.tsx","../node_modules/react-google-charts/src/load-data-table-from-spreadsheet.ts","../node_modules/react-google-charts/src/components/GoogleChartEvents.tsx","../node_modules/react-google-charts/src/components/GoogleChart.tsx","../node_modules/react-google-charts/src/ReactGoogleCharts.tsx","../node_modules/react-google-charts/src/types.ts","../node_modules/react-google-charts/src/index.tsx","pages/ProjectVisualization/ganttchart.jsx","pages/Sidebar/index.jsx","../node_modules/@mui/icons-material/Apps.js","../node_modules/@mui/icons-material/Assignment.js","../node_modules/@mui/icons-material/Dashboard.js","../node_modules/@mui/icons-material/ListAlt.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst shapes = { round: \"rounded-lg\" };\r\nconst variants = {\r\n  gradient: {\r\n    blue_gray_300_01_deep_orange_500: \"bg-gradient  text-white-A700\",\r\n  },\r\n  fill: {\r\n    indigo_800: \"bg-indigo-800 text-white-A700\",\r\n    indigo_800_01: \"bg-indigo-800_01 text-white-A700\",\r\n  },\r\n};\r\nconst sizes = { xs: \"p-3\", sm: \"p-[22px] sm:px-5\" };\r\n\r\nconst Button = ({\r\n  children,\r\n  className = \"\",\r\n  leftIcon,\r\n  rightIcon,\r\n  shape = \"\",\r\n  size = \"xs\",\r\n  variant = \"fill\",\r\n  color = \"\",\r\n  ...restProps\r\n}) => {\r\n  return (\r\n    <button\r\n      className={`${className} ${(shape && shapes[shape]) || \"\"} ${\r\n        (size && sizes[size]) || \"\"\r\n      } ${(variant && variants[variant]?.[color]) || \"\"}`}\r\n      {...restProps}\r\n    >\r\n      {!!leftIcon && leftIcon}\r\n      {children}\r\n      {!!rightIcon && rightIcon}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  shape: PropTypes.oneOf([\"round\"]),\r\n  size: PropTypes.oneOf([\"xs\", \"sm\"]),\r\n  variant: PropTypes.oneOf([\"gradient\", \"fill\"]),\r\n  color: PropTypes.oneOf([\r\n    \"blue_gray_300_01_deep_orange_500\",\r\n    \"indigo_800\",\r\n    \"indigo_800_01\",\r\n  ]),\r\n};\r\n\r\nexport { Button };\r\n","import React from \"react\";\r\n\r\nconst Img = ({\r\n  className,\r\n  src = \"defaultNoData.png\",\r\n  alt = \"testImg\",\r\n  ...restProps\r\n}) => {\r\n  return (\r\n    <img\r\n      className={className}\r\n      src={src}\r\n      alt={alt}\r\n      {...restProps}\r\n      loading={\"lazy\"}\r\n    />\r\n  );\r\n};\r\nexport { Img };\r\n","import React from \"react\";\r\n\r\nexport const ErrorMessage = ({ errors = [], className = \"\" }) => {\r\n  return (\r\n    errors?.length > 0 && (\r\n      <div\r\n        className={`text-red-500 text-left text-xs w-full mt-1 ${className}`}\r\n      >\r\n        {errors.join(\", \")}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ErrorMessage } from \"../ErrorMessage\";\r\n\r\nconst variants = { fill: { gray_100: \"bg-gray-100 text-gray-800\" } };\r\nconst shapes = {\r\n  round: \"rounded-bl-[15px] rounded-br-none rounded-tl-[15px] rounded-tr-none\",\r\n};\r\nconst sizes = { xs: \"p-6 sm:px-5\" };\r\n\r\nconst Input = React.forwardRef(\r\n  (\r\n    {\r\n      wrapClassName = \"\",\r\n      className = \"\",\r\n      name = \"\",\r\n      placeholder = \"\",\r\n      type = \"text\",\r\n      children,\r\n      errors = [],\r\n      label = \"\",\r\n      prefix,\r\n      suffix,\r\n      onChange,\r\n      shape = \"round\",\r\n      size = \"xs\",\r\n      variant = \"fill\",\r\n      color = \"gray_100\",\r\n      ...restProps\r\n    },\r\n    ref,\r\n  ) => {\r\n    const handleChange = (e) => {\r\n      if (onChange) onChange(e?.target?.value);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          className={`${wrapClassName} \r\n              ${shapes[shape] || \"\"} \r\n              ${variants[variant]?.[color] || \"\"} \r\n              ${sizes[size] || \"\"}`}\r\n        >\r\n          {!!label && label}\r\n          {!!prefix && prefix}\r\n          <input\r\n            ref={ref}\r\n            className={`${className} bg-transparent border-0`}\r\n            type={type}\r\n            name={name}\r\n            onChange={handleChange}\r\n            placeholder={placeholder}\r\n            {...restProps}\r\n          />\r\n          {!!suffix && suffix}\r\n        </div>\r\n        {!!errors && <ErrorMessage errors={errors} />}\r\n      </>\r\n    );\r\n  },\r\n);\r\n\r\nInput.propTypes = {\r\n  wrapClassName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string,\r\n  shape: PropTypes.oneOf([\"round\"]),\r\n  size: PropTypes.oneOf([\"xs\"]),\r\n  variant: PropTypes.oneOf([\"fill\"]),\r\n  color: PropTypes.oneOf([\"gray_100\"]),\r\n};\r\n\r\nexport { Input };\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ErrorMessage } from \"../ErrorMessage\";\r\n\r\nconst variants = {\r\n  underline: { white_A700: \"border-b border-white-A700 text-blue_gray-900\" },\r\n};\r\n\r\nconst sizes = { xs: \"pb-px\" };\r\n\r\nconst SelectBox = React.forwardRef(\r\n  (\r\n    {\r\n      children,\r\n      placeholder = \"Select\",\r\n      className = \"\",\r\n      options = [],\r\n      isSearchable = false,\r\n      placeholderClassName = \"\",\r\n      isMulti = false,\r\n      onChange,\r\n      value = \"\",\r\n      errors = [],\r\n      indicator,\r\n      shape = \"\",\r\n      size = \"xs\",\r\n      variant = \"underline\",\r\n      color = \"white_A700\",\r\n      ...restProps\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [selectedVal, setSelectedVal] = React.useState(value);\r\n\r\n    const handleChange = (data) => {\r\n      setSelectedVal(data);\r\n      if (isMulti) {\r\n        onChange?.(data?.map((d) => d.value) || []);\r\n      } else {\r\n        onChange?.(data?.value);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Select\r\n          ref={ref}\r\n          options={options}\r\n          className={`${className} ${(size && sizes[size]) || \"\"} ${\r\n            (variant && variants[variant]?.[color]) || \"\"\r\n          }`}\r\n          placeholder={\r\n            <div className={placeholderClassName}>{placeholder}</div>\r\n          }\r\n          isSearchable={isSearchable}\r\n          isMulti={isMulti}\r\n          components={{\r\n            IndicatorSeparator: () => null,\r\n            ...(indicator && { DropdownIndicator: () => indicator }),\r\n          }}\r\n          value={selectedVal}\r\n          onChange={handleChange}\r\n          styles={{\r\n            container: (provided) => ({\r\n              ...provided,\r\n              zIndex: 0,\r\n            }),\r\n            control: (provided) => ({\r\n              ...provided,\r\n              backgroundColor: \"transparent\",\r\n              border: \"0 !important\",\r\n              boxShadow: \"0 !important\",\r\n              minHeight: \"auto\",\r\n              \"&:hover\": {\r\n                border: \"0 !important\",\r\n              },\r\n            }),\r\n            option: (provided, state) => ({\r\n              ...provided,\r\n              color: state.isSelected && \"#fafafa\",\r\n              backgroundColor: state.isSelected && \"#323e73\",\r\n              \"&:hover\": { backgroundColor: \"#323e73\", color: \"#ffffff\" },\r\n            }),\r\n            singleValue: (provided) => ({\r\n              ...provided,\r\n              color: \"inherit\",\r\n            }),\r\n            input: (provided) => ({\r\n              ...provided,\r\n              color: \"inherit\",\r\n              margin: \"0\",\r\n              padding: \"0\",\r\n              // height: \"0\",\r\n            }),\r\n            valueContainer: (provided) => ({\r\n              ...provided,\r\n              padding: \"0\",\r\n            }),\r\n            dropdownIndicator: (provided) => ({\r\n              ...provided,\r\n              paddingTop: \"0px\",\r\n              paddingBottom: \"0px\",\r\n            }),\r\n            clearIndicator: (provided) => ({\r\n              ...provided,\r\n              padding: \"0\",\r\n            }),\r\n            multiValueLabel: (provided) => ({\r\n              ...provided,\r\n              padding: \"0\",\r\n            }),\r\n            menuPortal: (base) => ({ ...base, zIndex: 999999 }),\r\n            placeholder: (base) => ({\r\n              ...base,\r\n              margin: 0,\r\n            }),\r\n          }}\r\n          menuPortalTarget={document.body}\r\n          closeMenuOnScroll={(event) => {\r\n            return event.target.id === \"scrollContainer\";\r\n          }}\r\n          {...restProps}\r\n        />\r\n        <ErrorMessage errors={errors} />\r\n        {children}\r\n      </>\r\n    );\r\n  },\r\n);\r\n\r\nSelectBox.propTypes = {\r\n  placeholder: PropTypes.string,\r\n  className: PropTypes.string,\r\n  options: PropTypes.array,\r\n  isSearchable: PropTypes.bool,\r\n  placeholderClassName: PropTypes.string,\r\n  isMulti: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n  value: PropTypes.string,\r\n\r\n  size: PropTypes.oneOf([\"xs\"]),\r\n  variant: PropTypes.oneOf([\"underline\"]),\r\n  color: PropTypes.oneOf([\"white_A700\"]),\r\n};\r\n\r\nSelectBox.defaultProps = {\r\n  placeholder: \"Select\",\r\n  className: \"\",\r\n  isSearchable: false,\r\n  placeholderClassName: \"\",\r\n  isMulti: false,\r\n  value: \"\",\r\n  variant: \"underline\",\r\n  color: \"white_A700\",\r\n  size: \"xs\",\r\n  options: [],\r\n  onChange: () => {},\r\n};\r\nexport { SelectBox };\r\n","import React from \"react\";\r\n\r\nconst sizeClasses = {\r\n  txtPoppinsBold16: \"font-bold font-poppins\",\r\n  txtInterBold16Gray900: \"font-bold font-inter\",\r\n  txtInterMedium24: \"font-inter font-medium\",\r\n  txtPoppinsBold20: \"font-bold font-poppins\",\r\n  txtInterBold16: \"font-bold font-inter\",\r\n  txtPoppinsRegular16WhiteA70001: \"font-normal font-poppins\",\r\n  txtPoppinsBold22: \"font-bold font-poppins\",\r\n  txtPoppinsBold44: \"font-bold font-poppins\",\r\n  txtPoppinsBold34: \"font-bold font-poppins\",\r\n  txtPoppinsRegular16: \"font-normal font-poppins\",\r\n  txtPoppinsRegular16WhiteA700: \"font-normal font-poppins\",\r\n  txtInterBold24: \"font-bold font-inter\",\r\n  txtPoppinsRegular22: \"font-normal font-poppins\",\r\n  txtInterMedium24WhiteA700: \"font-inter font-medium\",\r\n  txtPoppinsMedium12: \"font-medium font-poppins\",\r\n  txtPoppinsExtraBold32: \"font-extrabold font-poppins\",\r\n  txtInterMedium24Gray700: \"font-inter font-medium\",\r\n};\r\n\r\nconst Text = ({ children, className = \"\", size, as, ...restProps }) => {\r\n  const Component = as || \"p\";\r\n\r\n  return (\r\n    <Component\r\n      className={`text-left ${className} ${size && sizeClasses[size]}`}\r\n      {...restProps}\r\n    >\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n\r\nexport { Text };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport { Text, Button } from '../../components';\r\nimport Navigation from '../Sidebar';\r\n\r\nconst ProjectProgress = ({ progress, statisticsData, tasks }) => {\r\n  const [projectname, setProjectname] = useState(\"\");\r\n  const [activeItem, setActiveItem] = useState(null);\r\n  const navigate = useNavigate();\r\n  const { projectId } = useParams();\r\n  const location = useLocation();\r\n  let userrole=localStorage.getItem(\"role\")\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    fetch(`http://127.0.0.1:3000/api/v1/projects/${projectId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Project not found\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setProjectname(data.data.project.name);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error: \", error);\r\n      });\r\n  }, [projectId]);\r\n\r\n  useEffect(() => {\r\n    // Extract the pathname from the location\r\n    const { pathname } = location;\r\n    // Check if any of the menu items match the current pathname\r\n    if (pathname.includes('/details')) {\r\n      setActiveItem(`/details/${projectId}`);\r\n    } else if (pathname.includes('/kanban')) {\r\n      setActiveItem(`/kanban/${projectId}`);\r\n    } else if (pathname.includes('/calendar')) {\r\n      setActiveItem(`/calendar/${projectId}`);\r\n    } else if (pathname.includes('/ganttchart')) {\r\n      setActiveItem(`/ganttchart/${projectId}`);\r\n    } else {\r\n      setActiveItem(null);\r\n    }\r\n  }, [location, projectId]);\r\n\r\n  const navigateTo = (path) => () => {\r\n    setActiveItem(path);\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', height: '100vh' }}>\r\n      <Navigation />\r\n      <div style={{ width: '73%', padding: '20px', marginLeft: '350px' }}>\r\n        <Text\r\n          className=\"md:ml-[0] ml-[851px] text-base text-indigo-800 tracking-[0.44px]\"\r\n          size=\"txtPoppinsRegular16\"\r\n          onClick={navigateTo('/myprofile')}\r\n        >\r\n          My Profile\r\n        </Text>\r\n        <Text\r\n          className=\"mt-[95px] ml-[50px] sm:text-3xl md:text-[3px] text-[34px] text-left text-indigo-800\"\r\n          size=\"txtPoppinsBold34\"\r\n        >\r\n          {projectname}\r\n        </Text>\r\n        <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginRight: '50px' }}>\r\n        {userrole===\"Project Manager\"  && (\r\n          <Button\r\n            className=\"common-pointer cursor-pointer leading-[normal] min-w-[10px] mt-2.5 text-base text-center tracking-[0.44px]\"\r\n            style={{ width: '100px', marginLeft: '50px' }}\r\n            onClick={navigateTo(`/updateproject/${projectId}`)}\r\n            shape=\"round\"\r\n            color=\"indigo_800_01\"\r\n          >\r\n            Settings\r\n          </Button>\r\n        )}\r\n\r\n{/* {userrole===\"Project Manager\"  && (\r\n          <Button\r\n            className=\"common-pointer cursor-pointer leading-[normal] min-w-[10px] mt-2.5 text-base text-center tracking-[0.44px]\"\r\n            style={{ width: '100px', marginLeft: '50px', backgroundColor: '#BE3144', color: '#ffffff' }}\r\n            onClick={navigateTo(`/updateproject/${projectId}`)}\r\n            shape=\"round\"\r\n          >\r\n            Delete\r\n          </Button>\r\n\r\n)} */}\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', marginTop: '20px', cursor: 'pointer' }}>\r\n          <h3\r\n            onClick={navigateTo(`/details/${projectId}`)}\r\n            style={{\r\n              margin: '0 10px',\r\n              padding: '10px 20px',\r\n              borderBottom: activeItem === `/details/${projectId}` ? '3px solid #323F73' : '3px solid transparent',\r\n              fontWeight: activeItem === `/details/${projectId}` ? 'bold' : 'normal',\r\n              color: '#323F73',\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            Statistics\r\n          </h3>\r\n          <h3\r\n            onClick={navigateTo(`/kanban/${projectId}`)}\r\n            style={{\r\n              margin: '0 70px',\r\n              padding: '10px 20px',\r\n              borderBottom: activeItem === `/kanban/${projectId}` ? '3px solid #323F73' : '3px solid transparent',\r\n              fontWeight: activeItem === `/kanban/${projectId}` ? 'bold' : 'normal',\r\n              color: '#323F73',\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            Kanban View\r\n          </h3>\r\n          <h3\r\n            onClick={navigateTo(`/calendar/${projectId}`)}\r\n            style={{\r\n              margin: '0 60px',\r\n              padding: '10px 20px',\r\n              borderBottom: activeItem === `/calendar/${projectId}` ? '3px solid #323F73' : '3px solid transparent',\r\n              fontWeight: activeItem === `/calendar/${projectId}` ? 'bold' : 'normal',\r\n              color: '#323F73',\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            Calendar View\r\n          </h3>\r\n          <h3\r\n            onClick={navigateTo(`/ganttchart/${projectId}`)}\r\n            style={{\r\n              margin: '0 40px',\r\n              padding: '10px 20px',\r\n              borderBottom: activeItem === `/ganttchart/${projectId}` ? '3px solid #323F73' : '3px solid transparent',\r\n              fontWeight: activeItem === `/ganttchart/${projectId}` ? 'bold' : 'normal',\r\n              color: '#323F73',\r\n              cursor: 'pointer',\r\n            }}\r\n          >\r\n            Gantt View\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectProgress;\r\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  propsFromContext: ReactGoogleChartProps | null;\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n\n  componentDidMount() {\n    const { google, googleChartWrapper } = this.props;\n\n    this.listenToEvents({\n      chartEvents: this.propsFromContext?.chartEvents || null,\n      google,\n      googleChartWrapper,\n    });\n  }\n\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.propsFromContext = propsFromContext;\n          return null;\n        }}\n      />\n    );\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.propsFromContext = null;\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\r\nimport { Chart } from \"react-google-charts\";\r\nimport ProjectProgress from './details';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst GanttComponent = () => {\r\n  const [selectedCategory, setSelectedCategory] = useState('Gantt Chart');\r\n  const navigate = useNavigate();\r\n  const { projectId } = useParams();\r\n  const [task, setTask] = useState([]);\r\n\r\n  const isLaptop = useMediaQuery({ minWidth: 1024 });\r\n\r\n  const handleCategoryChange = (event) => {\r\n    setSelectedCategory(event.target.value);\r\n  };\r\n\r\n  const handleNavigate = () => {\r\n    console.log(`Navigate to ${selectedCategory} view`);\r\n  };\r\n\r\n  const handleDeletionProject = () => {\r\n    console.log(`Delete project in ${selectedCategory} view`);\r\n  };\r\n\r\n  const handleEventClick = (event) => {\r\n    console.log(`Clicked on event: ${event.title}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the API\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    fetch(`http://127.0.0.1:3000/api/v1/projects/${projectId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        // Map API data to Gantt chart format\r\n        const tasks = data.data.project.tasks; // Array of tasks\r\n\r\n        const columns = [\r\n            { type: \"string\", label: \"Task ID\" },\r\n            { type: \"string\", label: \"Task Name\" },\r\n            { type: \"string\", label: \"Description\" },\r\n            { type: \"date\", label: \"Start Date\" },\r\n            { type: \"date\", label: \"End Date\" },\r\n            { type: \"number\", label: \"Priority\" },\r\n            { type: \"number\", label: \"Status\" },\r\n            { type: \"string\", label: \"Pre Dependency\" },\r\n            { type: \"string\", label: \"Post Dependency\" }\r\n        ];\r\n\r\n        const rows = tasks.map(task => [\r\n            task.id,\r\n            task.name,\r\n            task.description,\r\n            new Date(task.start_date),\r\n            new Date(task.end_date),\r\n            task.priority,\r\n            task.status,\r\n            task.pre_dependency,\r\n            task.post_dependency\r\n        ]);\r\n\r\n        const ganttData = [columns, ...rows];\r\n\r\n        setTask(ganttData);\r\n    })\r\n    .catch(error => {\r\n        console.error('Error fetching data:', error);\r\n    });\r\n}, [projectId]);\r\n\r\n\r\n  const options = {\r\n    height: 1000, // Reduced height to make the chart smaller\r\n    gantt: {\r\n      defaultStartDateMillis: new Date(2015, 3, 28),\r\n      criticalPathEnabled: true,\r\n      criticalPathStyle: {\r\n        stroke: \"#e64a19\",\r\n        strokeWidth: 4,\r\n      },\r\n      innerGridTrack: { fill: \"#fff3e0\" },\r\n      innerGridDarkTrack: { fill: \"#ffcc80\" },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProjectProgress\r\n        handleCategoryChange={handleCategoryChange}\r\n        handleNavigate={handleNavigate}\r\n        handleDeletionProject={handleDeletionProject}\r\n        tasks={task}\r\n      />\r\n      <Chart\r\n        className=\"gantt-chart\"\r\n        chartType=\"Gantt\"\r\n        width=\"85%\"\r\n        height=\"100%\" \r\n        data={task}\r\n        options={options}\r\n      />\r\n      {isLaptop && (\r\n        <style>\r\n          {`\r\n            .gantt-chart {\r\n              margin-top: -30%;\r\n              margin-left: 30%;\r\n            }\r\n          `}\r\n        </style>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttComponent;\r\n","import React, { useState } from 'react';\r\nimport { Menu, MenuItem, Sidebar } from 'react-pro-sidebar';\r\nimport { Text } from '../../components';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\nimport ListAltIcon from '@mui/icons-material/ListAlt';\r\nimport AppsIcon from '@mui/icons-material/Apps';\r\n\r\nconst Navigation = () => {\r\n  const navigate = useNavigate();\r\n  const [hoveredItem, setHoveredItem] = useState(null);\r\n\r\n  const handleMenuItemClick = (route) => {\r\n    navigate(route);\r\n  };\r\n\r\n  let userrole=localStorage.getItem(\"role\")\r\n\r\n  const iconStyles = {\r\n    color: '#FFF7F1',\r\n    cursor: 'pointer',\r\n    padding: '10px',\r\n    display: 'flex',\r\n    marginLeft: '40px',\r\n  };\r\n\r\n  const textStyles = {\r\n    textAlign: 'left',\r\n    marginRight: '60px',\r\n  };\r\n\r\n  const handleMouseEnter = (menuItem) => {\r\n    setHoveredItem(menuItem);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredItem(null);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '20%', position: 'fixed', height: '100%' }}>\r\n      <Sidebar\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          background: '#332941',\r\n          cursor: 'pointer',\r\n        }}\r\n      >\r\n        <Menu>\r\n          <Text\r\n            style={{\r\n              color: '#FFF7F1',\r\n              marginTop: '30px',\r\n              textShadow: '2px 2px 4px rgba(0, 0, 0, 0.25)',\r\n            }}\r\n            className=\"font-bold text-[22px] text-center sm:text-lg md:text-xl\"\r\n          >\r\n            ProjectFlow\r\n          </Text>\r\n          <MenuItem\r\n            style={{ ...iconStyles, marginTop: '80px', transform: hoveredItem === '/dashboard' ? 'scale(1.1)' : 'scale(1)', transition: 'transform 0.2s ease-in-out',}}\r\n            onMouseEnter={() => handleMouseEnter('/dashboard')}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleMenuItemClick('/dashboard')}\r\n          >\r\n            <DashboardIcon style={{ marginRight: '20px' }} />\r\n            <div style={{ ...textStyles, marginRight: 'auto' }}>Dashboard</div>\r\n          </MenuItem>\r\n          <MenuItem\r\n            style={{...iconStyles, transform: hoveredItem === '/myprojects' ? 'scale(1.1)' : 'scale(1)', transition: 'transform 0.2s ease-in-out', }}\r\n            onMouseEnter={() => handleMouseEnter('/myprojects')}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleMenuItemClick('/myprojects')}\r\n          >\r\n            <AssignmentIcon style={{ marginRight: '20px'}} />\r\n            <div style={{ ...textStyles, marginRight: 'auto' }}>Projects</div>\r\n          </MenuItem>\r\n          {userrole!==\"Client\" &&(\r\n          <MenuItem\r\n            style={{...iconStyles, transform: hoveredItem === '/mytasks' ? 'scale(1.1)' : 'scale(1)' , transition: 'transform 0.2s ease-in-out',}}\r\n            onMouseEnter={() => handleMouseEnter('/mytasks')}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleMenuItemClick('/mytasks')}\r\n          >\r\n            \r\n            <ListAltIcon style={{ marginRight: '20px'}} />\r\n           \r\n            <span style={{ ...textStyles, marginRight: 'auto' }}>My Tasks</span>\r\n           \r\n          </MenuItem>\r\n           )}\r\n          <MenuItem\r\n            style={{...iconStyles,transform: hoveredItem === '/apps' ? 'scale(1.1)' : 'scale(1)', transition: 'transform 0.2s ease-in-out',  }}\r\n            onMouseEnter={() => handleMouseEnter('/apps')}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleMenuItemClick('/apps')}\r\n          >\r\n            <AppsIcon style={{ marginRight: '20px' }} />\r\n            <span style={{ ...textStyles, marginRight: 'auto' }}>Apps</span>\r\n          </MenuItem>\r\n        </Menu>\r\n      </Sidebar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M4 8h4V4H4zm6 12h4v-4h-4zm-6 0h4v-4H4zm0-6h4v-4H4zm6 0h4v-4h-4zm6-10v4h4V4zm-6 4h4V4h-4zm6 6h4v-4h-4zm0 6h4v-4h-4z\"\n}), 'Apps');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1m2 14H7v-2h7zm3-4H7v-2h10zm0-4H7V7h10z\"\n}), 'Assignment');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 13h8V3H3zm0 8h8v-6H3zm10 0h8V11h-8zm0-18v6h8V3z\"\n}), 'Dashboard');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 5v14H5V5zm1.1-2H3.9c-.5 0-.9.4-.9.9v16.2c0 .4.4.9.9.9h16.2c.4 0 .9-.5.9-.9V3.9c0-.5-.5-.9-.9-.9M11 7h6v2h-6zm0 4h6v2h-6zm0 4h6v2h-6zM7 7h2v2H7zm0 4h2v2H7zm0 4h2v2H7z\"\n}), 'ListAlt');"],"names":["shapes","round","variants","gradient","blue_gray_300_01_deep_orange_500","fill","indigo_800","indigo_800_01","sizes","xs","sm","Button","_ref","_variants$variant","children","className","leftIcon","rightIcon","shape","size","variant","color","restProps","_jsxs","concat","Img","src","alt","_jsx","loading","ErrorMessage","errors","length","join","gray_100","Input","React","ref","wrapClassName","name","placeholder","type","label","prefix","suffix","onChange","_Fragment","e","_e$target","target","value","underline","white_A700","options","isSearchable","placeholderClassName","isMulti","indicator","selectedVal","setSelectedVal","Select","components","IndicatorSeparator","DropdownIndicator","data","map","d","styles","container","provided","zIndex","control","backgroundColor","border","boxShadow","minHeight","option","state","isSelected","singleValue","input","margin","padding","valueContainer","dropdownIndicator","paddingTop","paddingBottom","clearIndicator","multiValueLabel","menuPortal","base","menuPortalTarget","document","body","closeMenuOnScroll","event","id","defaultProps","sizeClasses","txtPoppinsBold16","txtInterBold16Gray900","txtInterMedium24","txtPoppinsBold20","txtInterBold16","txtPoppinsRegular16WhiteA70001","txtPoppinsBold22","txtPoppinsBold44","txtPoppinsBold34","txtPoppinsRegular16","txtPoppinsRegular16WhiteA700","txtInterBold24","txtPoppinsRegular22","txtInterMedium24WhiteA700","txtPoppinsMedium12","txtPoppinsExtraBold32","txtInterMedium24Gray700","Text","as","Component","progress","statisticsData","tasks","projectname","setProjectname","useState","activeItem","setActiveItem","navigate","useNavigate","projectId","useParams","location","useLocation","userrole","localStorage","getItem","useEffect","token","fetch","headers","Authorization","then","response","ok","Error","json","project","catch","error","console","pathname","includes","navigateTo","path","style","display","height","Navigation","width","marginLeft","onClick","justifyContent","alignItems","marginRight","marginTop","cursor","borderBottom","fontWeight","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","failed","setFailed","onLoad","onError","google","window","charts","load","packages","language","setOnLoadCallback","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","legendToggle","getChartWrapper","spreadSheetQueryParameters","gid","rootProps","chartWrapperParams","uniqueID","DEFAULT_CHART_COLORS","Provider","Consumer","ContextProvider","ContextConsumer","render","context","GoogleChartDataTableInner","componentDidMount","this","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","visualization","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","hiddenColumns","addListener","selection","getSelection","dataTable","getDataTable","row","columnIndex","column","columnID","getColumnID","setState","filter","colID","applyFormatters","formatters","formatter","ArrowFormat","format","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","async","diffdata","rows","columns","chartType","spreadSheetUrl","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","googleViz","urlParams","arguments","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","Query","send","isError","getMessage","getDetailedMessage","loadDataTableFromSpreadSheet","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","chart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","colors","from","dontcare","GoogleChartDataTable","shouldComponentUpdate","Object","assign","GoogleChartEvents","listenToEvents","chartEvents","eventName","callback","args","_len","_key","chartWrapper","_this","eventArgs","propsFromContext","constructor","super","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","current","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","setControlType","nextProps","nextState","divStyle","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","graphID","graph_id","instanceGraphID","getControlID","index","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","_this1","key","getContainerId","Chart$1","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","google1","onSuccess","setInterval","clearInterval","GoogleDataTableColumnRoleType","GanttComponent","selectedCategory","setSelectedCategory","task","setTask","isLaptop","useMediaQuery","minWidth","description","Date","start_date","end_date","priority","status","pre_dependency","post_dependency","ganttData","gantt","defaultStartDateMillis","criticalPathEnabled","criticalPathStyle","stroke","strokeWidth","innerGridTrack","innerGridDarkTrack","ProjectProgress","handleCategoryChange","handleNavigate","log","handleDeletionProject","Chart","hoveredItem","setHoveredItem","handleMenuItemClick","route","iconStyles","textStyles","textAlign","handleMouseEnter","menuItem","handleMouseLeave","position","Sidebar","background","Menu","textShadow","MenuItem","transform","transition","onMouseEnter","onMouseLeave","DashboardIcon","AssignmentIcon","ListAltIcon","AppsIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx"],"sourceRoot":""}